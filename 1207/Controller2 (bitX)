----------------------------------------------------------------------------------
-- main controller
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Main_controller is
  Port (
  -- Bidirectional buffer
  data_int_in: in std_logic_vector(7 downto 0); 
  
  -- system input clk/reset
  m_sys_clk: in std_logic; -- controller / block memory clock
  m_sys_reset_b: in std_logic;
  
  -- Address decoder
  CW_addr: in std_logic;
  mem_addr: in std_logic;
  xclr_addr: in std_logic;
  DA_start_addr: in std_logic;
  DA_stop_addr: in std_logic;
  
  -- r/w enable (pc)
  ren: in std_logic;
  wen: in std_logic;
  
  -- 8254 in/out
  i8254_ick: in  std_logic;
  i8254_rp: in std_logic;
  
  dac_clk: out std_logic; --- address counter clock / DAC out register input
  
  -- address counter
  addr_cnt_clk: out std_logic;
  addr_cnt_clr: out std_logic;
  addr_cnt_en: out std_logic;
  
  -- block memory 
  mem_cs: out std_logic;
  mem_wen: out std_logic;
  mem_ren: out std_logic;
  
  
  --debug
  debug: out std_logic_vector(7 downto 0)
  
  );
end Main_controller;

architecture Behavioral of Main_controller is
	--- signal (CW Register)
		signal s_CW_reg_data_in : std_logic_vector(7 downto 0);
		signal s_CW_reg_data_out : std_logic_vector(7 downto 0);
		
		-- mode signal
		signal pc_mode : std_logic;
		--signal da_mode : std_logic;
		signal da_idle_mode: std_logic;
		signal da_active_mode: std_logic;
		signal standby_mode : std_logic;
		-----------------------------
		
	--- signal (controller)
		signal s_addr_cnt_en : std_logic;
		signal s_mem : std_logic;

---------------
-- CW register
component register_8bit is Port(
	reg_data_in : in std_logic_vector(7 downto 0);
	reg_data_out: out std_logic_vector(7 downto 0);
	reg_clk	: in std_logic;
	reset_b	: in std_logic
	);
end component;
---------------

	-- state define
	type control_state is (idle, SB, PC, DA_idle, DA_active);
	signal STATE: control_state := idle;

begin

-- port map (CW Register) ========================================== 확인중
CW_register : Register_8bit port map(
	reg_data_in		=> s_CW_reg_data_in, -- signal
	reg_data_out	=> s_CW_reg_data_out,
	reg_clk			=> m_sys_clk,
	reset_b			=> m_sys_reset_b
	);


	process(m_sys_clk, m_sys_reset_b)
	begin
	-- state machine --
	if(CW_addr = '1') then
		s_CW_reg_data_in <= data_int_in;
	end if;	
	end process;
			
	process(s_CW_reg_data_out,DA_start_addr,DA_stop_addr)
	begin
			case STATE is
				when idle =>
				--addr_cnt_clr<= '0';
				if(s_CW_reg_data_out = x"40") then
					STATE <= PC;
				elsif(s_CW_reg_data_out = x"80") then
					STATE <= SB;
					
				else
					STATE <= idle;
				end if;
				--
				
				when PC =>
				--addr_cnt_clr<= xclr_addr and wen;
				if(s_CW_reg_data_out = x"80") then
					STATE <= SB;
				elsif(s_CW_reg_data_out = x"20") then
					STATE <= DA_idle;
				--elsif(s_CW_reg_data_out = x"40") then
				elsif(s_CW_reg_data_out = x"00") then
					STATE <= idle;
				else
					STATE <= PC;
				end if;
				--
				
				when DA_idle =>
				--addr_cnt_clr<='1';
				if(DA_start_addr = '1') then -- DA_start 우선
					STATE <= DA_active;
				elsif(DA_start_addr = '0' and s_CW_reg_data_out = x"40") then
					STATE <= PC;
				elsif(s_CW_reg_data_out = x"00") then
					STATE <= idle;	
				else -- CW5 = 0 인 상황?!
					STATE <= DA_idle;
				end if;
				--
				
				when DA_active =>
				--addr_cnt_clr<= not i8254_rp;
				if(DA_stop_addr = '1') then
					STATE <= DA_idle;
				elsif(s_CW_reg_data_out = x"00") then
					STATE <= idle;	
				else
					STATE <= DA_active;
				end if;
				
				when SB =>
				--addr_cnt_clr<= '0';
				if(s_CW_reg_data_out = x"40") then
					STATE <= PC;
				elsif(s_CW_reg_data_out = x"00") then
					STATE <= idle;		
				else
					STATE <= SB;
				end if;	
			end case;
	end process;

	
	-- mode signal setting
	process(STATE)
	begin
		case STATE is
			when idle =>
				PC_mode 	<= '0';
				da_idle_mode <= '0';
				da_active_mode <= '0';
				--DA_mode		<= '0';
				standby_mode<= '0';
				
			when PC =>
				PC_mode 	<= '1';
				da_idle_mode <= '0';
				da_active_mode <= '0';
				--DA_mode		<= '0';
				standby_mode<= '0';
				
			when DA_idle =>
				PC_mode 	<= '0';
				--DA_mode		<= '1';
				da_idle_mode <= '1';
				da_active_mode <= '0';
				standby_mode<= '0';
				
			when DA_active =>
				PC_mode 	<= '0';
				--DA_mode		<= '1';
				da_idle_mode <= '0';
				da_active_mode <= '1';
				standby_mode<= '0';
				
			when SB =>
				PC_mode 	<= '0';
				da_idle_mode <= '0';
				da_active_mode <= '0';
				--DA_mode		<= '0';
				standby_mode<= '1';
				
			end case;
		end process;
		
	------- db_en = /sum, db_dir = bRD
	-- Signal Generation (Memory block) // --active high // <=
	mem_cs <= (PC_mode or (da_idle_mode or da_active_mode));
	mem_wen <= PC_mode and mem_addr and wen;
	mem_ren <= (PC_mode and mem_addr and ren) or (da_idle_mode or da_active_mode);
	
	addr_cnt_en <= not standby_mode;
	addr_cnt_clr <= (PC_mode and xclr_addr and wen) or da_idle_mode or (da_active_mode and (not i8254_rp));
	addr_cnt_clk <= (PC_mode and (xclr_addr or mem_addr) and (wen or ren)) or ((da_idle_mode or da_active_mode) and i8254_ick);
	
	dac_clk <= i8254_ick; --i8254_ick
		
	debug(0) <= PC_mode;
	debug(1) <= da_idle_mode;
	debug(2) <= da_active_mode;
	--debug <= "00000011" when state=sb;
end Behavioral;
